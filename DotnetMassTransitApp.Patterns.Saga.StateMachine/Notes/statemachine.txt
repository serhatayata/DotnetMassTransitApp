Automatonymous is a state machine library for .NET and provides a C# syntax to define a state machine, including states, 
events, and behaviors. MassTransit includes Automatonymous, and adds instance storage, event correlation, message 
binding, request and response support, and scheduling.

Automatonymous is no longer a separate NuGet package and has been assimilated by MassTransit. In previous versions, 
an additional package reference was required. If Automatonymous is referenced, that reference must be removed as it is no 
longer compatible.

//// State Machine

A state machine defines the states, events, and behavior of a finite state machine. Implemented as a class, which is 
derived from MassTransitStateMachine<T>, a state machine is created once, and then used to apply event triggered behavior 
to state machine instances.

//// Instance

An instance contains the data for a state machine instance. A new instance is created for every consumed initial event where 
an existing instance with the same CorrelationId was not found. A saga repository is used to persist instances. Instances 
are classes, and must implement the SagaStateMachineInstance interface.

//// State

States represent previously consumed events resulting in an instance being in a current state. An instance can only be in 
one state at a given time. A new instance defaults to the Initial state, which is automatically defined. The Final state is 
also defined for all state machines and is used to signify the instance has reached the final state.

//// Event

An event is something that happened which may result in a state change. An event can add or update instance data, as well 
as changing an instance's current state. The Event<T> is generic, where T must be a valid message type.

//// Behavior

Behavior is what happens when an event occurs during a state.

//// Message Order

Message brokers typically do not guarantee message order. Therefore, it is important to consider out-of-order messages in 
state machine design.


//// Event

An event is a message that can be consumed by the state machine. Events can specify any valid message type, and each event 
may be configured. There are several event configuration methods available.

The built-in CorrelatedBy<Guid> interface can be used in a message contract to specify the event CorrelationId.


//// Ignore event

It may be necessary to ignore an event in a given state, either to avoid fault generation, or to prevent messages from 
being moved to the _skipped queue. To ignore an event in a state, use the Ignore method.


//// Missing Event

If an event is not matching to an instance, the missing instance behavior can be configured.


//// Initial Insert

To increase new instance performance, configuring an event to directly insert into a saga repository may reduce lock 
contention. To configure an event to insert, it should be in the Initially block, as well as have a saga factory specified.

//// Completed Instance

By default, instances are not removed from the saga repository. To configure completed instance removal, specify the method 
used to determine if an instance has completed.

When the instance consumes the OrderCompleted event, the instance is finalized (which transitions the instance to the 
Final state). The SetCompletedWhenFinalized method defines an instance in the Final state as completed – which is then used 
by the saga repository to remove the instance.

To use a different completed expression, such as one that checks if the instance is in a Completed state, use the 
SetCompleted method.


//// ACTIVITIES

State machine behaviors are defined as a sequence of activities which are executed in response to an event. In addition to 
the activities included with Automatonymous, MassTransit includes activities to send, publish, and schedule messages, as well 
as initiate and respond to requests.



//// REQUEST

A request can be sent by a state machine using the Request method, which specifies the request type and the response 
type. Additional request settings may be specified, including the ServiceAddress and the Timeout.

If the ServiceAddress is specified, it should be the endpoint address of the service that will respond to the request. If 
not specified, the request will be published.

The default Timeout is thirty seconds but any value greater than or equal to TimeSpan.Zero can be specified. When a request 
is sent with a timeout greater than zero, a TimeoutExpired message is scheduled. Specifying TimeSpan.Zero will not schedule 
a timeout message and the request will never time out.

!! When a Timeout greater than Timespan.Zero is configured, a message scheduler must be configured. See the scheduling 
section for details on configuring a message scheduler.

When defining a Request, an instance property should be specified to store the RequestId which is used to correlate responses 
to the state machine instance. While the request is pending, the RequestId is stored in the property. When the request 
has completed the property is cleared. If the request times out or faults, the RequestId is retained to allow for 
later correlation if requests are ultimately completed (such as moving requests from the _error queue back into the 
service queue).

A recent enhancement making this property optional, instead using the instance's CorrelationId for the request 
message RequestId. This can simplify response correlation, and also avoids the need of a supplemental index on the 
saga repository. However, reusing the CorrelationId for the request might cause issues in highly complex systems. So 
consider this when choosing which method to use.


//// Missing Instance

If the saga instance has been finalized before the response, fault, or timeout have been received, it is possible to configure 
a missing instance handler, similar to a regular event.


//// Saga State Machine Activities

There are scenarios when an event behavior may have dependencies that need to be managed at a scope level, such as a 
database connection, or the complexity is best encapsulated in a separate class rather than being part of the state 
machine itself. Developers can create their own activities for state machine use, and optionally create their own 
extension methods to add them to a behavior.


//// Definitions

Saga definitions are used to specify the behavior of consumers so that they can be automatically configured. Definitions may 
be explicitly added by AddSaga or discovered automatically using any of the AddSagas methods.

