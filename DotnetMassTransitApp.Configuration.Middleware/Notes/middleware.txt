MassTransit is built using a network of pipes and filters to dispatch messages. A pipe is composed of a series of filters, 
each of which is a key atom and are described below.

Middleware components are configured using extension methods on any pipe configurator IPipeConfigurator<T>, and the 
extension methods all begin with Use to separate them from other methods.

To understand how middleware components are built, an understanding of filters and pipes is needed.

//////// Filters

A filter is a middleware component that performs a specific function, and should adhere to the single responsibility 
principal – do one thing, one thing only (and hopefully do it well). By sticking to this approach, developers are able to 
opt-in to each behavior without including unnecessary or unwatched functionality.

There are many filters included with GreenPipes, and a whole lot more of them are included with MassTransit. In fact, the 
entire MassTransit message flow is built around pipes and filters.

Developers can create their own filters. To create a filter, create a class that implements IFilter<T>.

Probe, The Probe method is used to interrogate the filter about its behavior. This should describe the filter in a way that 
a developer would understand its role when looking at a network graph.

The Send method is used to send contexts through the pipe to each filter. Context is the actual context, and next is used 
to pass the context to the next filter in the pipe. Send returns a Task, and should always follow the .NET guidelines 
for asynchronous methods.


//////// Creating Filters

To be consistent with MassTransit conventions, middleware configuration methods should start with Use.
Middleware components are configured using extension methods, to make them easy to discover.

The extension method creates the pipe specification for the middleware component, which can be added to any pipe. For 
a component on the message consumption pipeline, use ConsumeContext instead of any PipeContext.

The pipe specification is a class that adds the filter to the pipeline. Additional logic can be included, such as 
configuring optional settings, etc. using a closure syntax similar to the other configuration classes in MassTransit.

Finally, the middleware component itself is a filter added to the pipeline. All filters have absolute and complete control 
of the execution context and flow of the message. Pipelines are entirely asynchronous, and expect that asynchronous 
operations will be performed.


//////// Message Type Filters

In many cases, the message type is used by a filter. To create an instance of a generic filter that includes the message 
type, use the configuration observer.


//////// Pipes

Filters are combined in sequence to form a pipe. A pipe configurator, along with a pipe builder, is used to configure and build 
a pipe.

The IPipe interface is similar to IFilter, but a pipe hides the next parameter as it is part of the pipe's structure. It is 
the pipe's responsibility to pass the appropriate next parameter to the individual filters in the pipe.


//////// PipeContext

The context type has a PipeContext constraint, which is another core atom in GreenPipes. A pipe context can include payloads, 
which are kept in a last-in, first-out (LIFO) collection. Payloads are identified by type, and can be retrieved, added, and 
updated using the PipeContext methods

The payload methods are also used to check if a pipe context is another type of context. For example, to see if the SendContext is 
a RabbitMqSendContext, the TryGetPayload method should be used instead of trying to pattern match or cast the context parameter.


//////// Middleware Filters

//////// Kill Switch

A Kill Switch is used to prevent failing consumers from moving all the messages from the input queue to the error queue. 
By monitoring message consumption and tracking message successes and failures, a Kill Switch stops the receive endpoint when a 
trip threshold has been reached.

Typically, consumer exceptions are transient issues and suspending consumption until a later time when the transient issue may 
have been resolved.

- Dynamic Control: The Kill Switch allows you to control message consumption dynamically at runtime. You can activate or 
deactivate the Kill Switch on a receive endpoint programmatically or through management interfaces without redeploying or 
restarting the application.

- Endpoint Suspension: When the Kill Switch is activated for a receive endpoint, MassTransit stops consuming messages from 
the associated queue or exchange. Incoming messages are no longer processed by the consumers configured on the endpoint, 
effectively pausing message processing.

- Graceful Shutdown: When the Kill Switch is deactivated, message consumption resumes, and the endpoint returns to normal 
operation. MassTransit ensures a graceful transition, allowing existing message processing tasks to complete and preventing 
message loss or disruption.

- Operational Flexibility: The Kill Switch feature provides operational flexibility, allowing you to manage message 
consumption dynamically in response to changing conditions, such as maintenance activities, system upgrades, or 
performance degradation.

//////// UseKillSwitch

A Kill Switch can be configured on an individual receive endpoint or all receive endpoints on the bus. To configure a kill switch 
on all receive endpoints, add the UseKillSwitch method as shown.

A kill switch may be configured on the bus or on individual receive endpoint(s). When configured on the bus, the kill switch 
is applied to all receive endpoints.

Option          	Description
TrackingPeriod		The time window for tracking exceptions
TripThreshold		The percentage of failed messages that triggers the kill switch. Should be 0-100, but seriously like 5-10.
ActivationThreshold	The number of messages that must be consumed before the kill switch activates.
RestartTimeout		The wait time before restarting the receive endpoint
ExceptionFilter		By default, all exceptions are tracked. An exception filter can be configured to only track specific exceptions.


//////// Circuit Breaker

A circuit breaker is used to protect resources (remote, local, or otherwise) from being overloaded when in a failure state. 
For example, a remote web site may be unavailable and calling that web site in a message consumer takes 30-60 seconds to time 
out. By continuing to call the failing service, the service may be unable to recover. A circuit breaker detects the 
repeated failures and trips, preventing further calls to the service and giving it time to recover. Once the reset interval 
expires, calls are slowly allowed back to the service. If it is still failing, the breaker remains open, and the timeout 
interval resets. Once the service returns to healthy, calls flow normally as the breaker closes.


Option				Description

TrackingPeriod		The time window for tracking exceptions

TripThreshold		This is a percentage, and is based on the ratio of successful to failed attempts. When set to 15, if the ratio					   exceeds 15%, the circuit breaker opens and remains open until the ResetInterval expires.

ActiveThreshold		That must reach the circuit breaker in a tracking period before the circuit breaker can trip. If set to 10, the					   trip threshold is not evaluated until at least 10 messages have been received.

ResetInterval		The period of time between the circuit breaker trip and the first attempt to close the circuit breaker. Messages				   that reach the circuit breaker during the open period will immediately fail with the same exception that						   tripped the circuit breaker.

//////// Rate Limiter

A rate limiter is used to restrict the number of messages processed within a time period. The reason may be that an API or 
service only accepts a certain number of calls per minute, and will delay any subsequent attempts until the rate limiting period 
has expired.

NOTE : The rate limiter will delay message delivery until the rate limit expires, so it is best to avoid large time windows and keep
the rate limits sane. Something like 1000 over 10 minutes is a bad idea, versus 100 over a minute. Try to adjust the values and 
see what works for you.


//////// Concurrency Limit

The concurrency limit filter has been deprecated for most scenarios, developers should instead specify a ConcurrentMessageLimit 
at the bus, endpoint, or consumer level to limit the number of messages processed concurrently.

The concurrency limit refers to the maximum number of message processing tasks that can be executed concurrently by a consumer. 
It controls the degree of parallelism for message processing, limiting the number of messages that can be processed 
simultaneously by a consumer instance.


//////// Scoped Middleware Filters

///// Scoped Filters

Most of the built-in filters are created and added to the pipeline during configuration. This approach is typically 
sufficient, however, there are scenarios where the filter needs access to other components at runtime.

Using a scoped filter allows a new filter instance to be resolved from the container for each message. If a current scope is 
not available, a new scope will be created using the root container.


