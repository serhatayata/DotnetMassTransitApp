MassTransit is built using a network of pipes and filters to dispatch messages. A pipe is composed of a series of filters, 
each of which is a key atom and are described below.

Middleware components are configured using extension methods on any pipe configurator IPipeConfigurator<T>, and the 
extension methods all begin with Use to separate them from other methods.

To understand how middleware components are built, an understanding of filters and pipes is needed.

//////// Filters

A filter is a middleware component that performs a specific function, and should adhere to the single responsibility 
principal – do one thing, one thing only (and hopefully do it well). By sticking to this approach, developers are able to 
opt-in to each behavior without including unnecessary or unwatched functionality.

There are many filters included with GreenPipes, and a whole lot more of them are included with MassTransit. In fact, the 
entire MassTransit message flow is built around pipes and filters.

Developers can create their own filters. To create a filter, create a class that implements IFilter<T>.

Probe, The Probe method is used to interrogate the filter about its behavior. This should describe the filter in a way that 
a developer would understand its role when looking at a network graph.

The Send method is used to send contexts through the pipe to each filter. Context is the actual context, and next is used 
to pass the context to the next filter in the pipe. Send returns a Task, and should always follow the .NET guidelines 
for asynchronous methods.


//////// Creating Filters

To be consistent with MassTransit conventions, middleware configuration methods should start with Use.
Middleware components are configured using extension methods, to make them easy to discover.

The extension method creates the pipe specification for the middleware component, which can be added to any pipe. For 
a component on the message consumption pipeline, use ConsumeContext instead of any PipeContext.

The pipe specification is a class that adds the filter to the pipeline. Additional logic can be included, such as 
configuring optional settings, etc. using a closure syntax similar to the other configuration classes in MassTransit.

Finally, the middleware component itself is a filter added to the pipeline. All filters have absolute and complete control 
of the execution context and flow of the message. Pipelines are entirely asynchronous, and expect that asynchronous 
operations will be performed.


//////// Message Type Filters

In many cases, the message type is used by a filter. To create an instance of a generic filter that includes the message 
type, use the configuration observer.


//////// Pipes

Filters are combined in sequence to form a pipe. A pipe configurator, along with a pipe builder, is used to configure and build 
a pipe.

The IPipe interface is similar to IFilter, but a pipe hides the next parameter as it is part of the pipe's structure. It is 
the pipe's responsibility to pass the appropriate next parameter to the individual filters in the pipe.


//////// PipeContext

The context type has a PipeContext constraint, which is another core atom in GreenPipes. A pipe context can include payloads, 
which are kept in a last-in, first-out (LIFO) collection. Payloads are identified by type, and can be retrieved, added, and 
updated using the PipeContext methods

The payload methods are also used to check if a pipe context is another type of context. For example, to see if the SendContext is 
a RabbitMqSendContext, the TryGetPayload method should be used instead of trying to pattern match or cast the context parameter.


//////// Middleware Filters

//////// Kill Switch

A Kill Switch is used to prevent failing consumers from moving all the messages from the input queue to the error queue. 
By monitoring message consumption and tracking message successes and failures, a Kill Switch stops the receive endpoint when a 
trip threshold has been reached.

Typically, consumer exceptions are transient issues and suspending consumption until a later time when the transient issue may 
have been resolved.

- Dynamic Control: The Kill Switch allows you to control message consumption dynamically at runtime. You can activate or 
deactivate the Kill Switch on a receive endpoint programmatically or through management interfaces without redeploying or 
restarting the application.

- Endpoint Suspension: When the Kill Switch is activated for a receive endpoint, MassTransit stops consuming messages from 
the associated queue or exchange. Incoming messages are no longer processed by the consumers configured on the endpoint, 
effectively pausing message processing.

- Graceful Shutdown: When the Kill Switch is deactivated, message consumption resumes, and the endpoint returns to normal 
operation. MassTransit ensures a graceful transition, allowing existing message processing tasks to complete and preventing 
message loss or disruption.

- Operational Flexibility: The Kill Switch feature provides operational flexibility, allowing you to manage message 
consumption dynamically in response to changing conditions, such as maintenance activities, system upgrades, or 
performance degradation.