To consume messages, one or more consumers must be added and receive endpoints configured for the added consumers. 
MassTransit connects each receive endpoint to a queue on the message broker.

To add a consumer and automatically configure a receive endpoint for the consumer, call one of the AddConsumer methods and 
call ConfigureEndpoints

MassTransit will automatically configure a receive endpoint for the SubmitOrderConsumer using the name returned by the 
configured endpoint name formatter. When the bus is started, the receive endpoint will be started and messages will be 
delivered from the queue by the transport to an instance of the consumer.

All consumer types can be added, including consumers, sagas, saga state machines, and routing slip activities. If a job consumer 
is added, additional configuration is required.

To exclude a consumer, saga, or routing slip activity from automatic configuration, use the ExcludeFromConfigureEndpoints

//////// Configure Endpoints

As shown in the example above, using ConfigureEndpoints is the preferred approach to configure receive endpoints. By 
registering consumers, sagas, and routing slip activities along with their optional definitions, MassTransit is able to 
configure receive endpoints for all registered consumer types. Receive endpoint names are generated using an endpoint name 
formatter (unless otherwise specified in a definition), and each receive endpoint is configured.

As receive endpoints are configured, one or more consumer types are configured on each receive endpoint. If multiple consumer 
types share the same endpoint name, those consumer types will be configured on the same receive endpoint. For each consumer 
type, its respective consumer, saga, or activity definition will be applied to the receive endpoint.

If multiple consumer types share the same receive endpoint, and more than one of those consumer types have a matching 
definition that specifies the same middleware component, multiple filters may be configured! This may lead to unpredictable 
results, so caution is advised when configuring multiple consumer types on the same receive endpoint.

//////// Configure Endpoints Callback

To apply receive endpoint settings or configure middleware for all receive endpoints configured by ConfigureEndpoints, a 
callback can be added.

When ConfigureEndpoints is called, any registered callbacks will be called for every recieve endpoint endpoint. Each callback 
will only be called once per receive endpoint.

To conditionally apply transport-specific settings, the cfg parameter can be pattern-matched to the transport type as shown below.


//////// Endpoint Name Formatters

ConfigureEndpoints uses an IEndpointNameFormatter to format the queue names for all supported consumer types. The default 
endpoint name formatter returns PascalCase class names without the namespace. There are several built-in endpoint name 
formatters included. For the SubmitOrderConsumer, the receive endpoint names would be formatted as shown below. Note that 
class suffixes such as Consumer, Saga, and Activity are trimmed from the endpoint name by default.

Default ->	SetDefaultEndpointNameFormatter ->	SubmitOrder

Snake Case ->	SetSnakeCaseEndpointNameFormatter ->	submit_order

Kebab Case ->	SetKebabCaseEndpointNameFormatter ->	submit-order

The endpoint name formatters can also be customized by constructing a new instance and configuring MassTransit to use it.

By specifying a prefix, the endpoint name would be dev-submit-order. This is useful when sharing a single broker with 
multiple developers (Amazon SQS is account-wide, for instance).


//////// Receive Endpoints

PrefetchCount ->	Number of unacknowledged messages delivered by the broker ->	max(CPU Count x 2,16)
ConcurrentMessageLimit ->	Number of concurrent messages delivered to consumers -> 	(none, uses PrefetchCount)
ConfigureConsumeTopology -> 	Create exchanges/topics on the broker and bind them to the receive endpoint	true
ConfigureMessageTopology -> 	Create exchanges/topics on the broker and bind them to the receive endpoint for a specific message type	true
PublishFaults ->	Publish Fault<T> events when consumers fault -> 	true
DefaultContentType ->	The default content type for received messages
SerializerContentType ->	The default content type for sending/publishing messages


//////// Temporary Endpoints

Some consumers only need to receive messages while connected, and any messages published while disconnected should be 
discarded. This can be achieved by using a TemporaryEndpointDefinition to configure the receive endpoint.


//////// Consumer Definition

A consumer definition is used to configure the receive endpoint and pipeline behavior for the consumer. When scanning 
assemblies or namespaces for consumers, consumer definitions are also found and added to the container. The 
SubmitOrderConsumer and matching definition are shown below.


//////// Endpoint Configuration

To configure the endpoint for a consumer registration, or override the endpoint configuration in the definition, the Endpoint 
method can be added to the consumer registration. This will create an endpoint definition for the consumer, and register it in 
the container. This method is available on consumer and saga registrations, with separate execute and compensate endpoint 
methods for activities.

When the endpoint is configured after the AddConsumer method, the configuration then overrides the endpoint configuration in 
the consumer definition. However, it cannot override the EndpointName if it is specified in the constructor.

