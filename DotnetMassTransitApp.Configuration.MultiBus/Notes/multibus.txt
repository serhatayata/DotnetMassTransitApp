MassTransit is designed so that most applications only need a single bus, and that is the recommended approach. Using 
a single bus, with however many receive endpoints are needed, minimizes complexity and ensures efficient broker 
resource utilization. Consistent with this guidance, container configuration using the AddMassTransit method registers 
the appropriate types so that they are available to other components, as well as consumers, sagas, and activities.

However, with broader use of cloud-based platforms comes a greater variety of messaging transports, not to mention HTTP as 
a transfer protocol. As application sophistication increases, connecting to multiple message transports and/or brokers 
is becoming more common. Therefore, rather than force developers to create their own solutions, MassTransit has the 
ability to configure additional bus instances within specific dependency injection containers.

//////// MultiBus Configuration

To support multiple bus instances in a single container, the interface behaviors described above had to be 
considered carefully. There are expectations as to how these interfaces behave, and it was important to ensure 
consistent behavior whether an application has one, two, or a dozen bus instances (please, not a dozen – think of 
the children). A way to differentiate between different bus instances ensuring that sent or published messages end up on 
the right queues or topics is needed. The ability to configure each bus instance separately, yet leverage the power of 
a single shared container is also a must.

To configure additional bus instances, create a new interface that includes IBus. Then, using that interface, configure 
the additional bus using the AddMassTransit<T> method, which is included in the MassTransit.MultiBus namespace.


//////// Using your MultiBus

For consumers or dependencies that need to send or publish messages to a different bus instance, a dependency on that 
specific bus interface (such as IBus, or ISecondBus) would be added.

//////// Container Registration Details

To support a first class experience with Microsoft.Extensions.DependencyInjection MassTransit registers common 
interfaces for MultiBus instances using a Bind<TKey, TValue> that allows you to specify the owner of the type you 
are interested in. This allows you to access various pieces of MassTransit outside of a Consumer. Below are two tables 
that list out the various items you might be interested in.

//// First Bus

There are several interfaces added to the container using this configuration:

IBusControl						Singleton		Used to start/stop the bus (not typically used)
IBus							Singleton		Publish/Send on this bus, starting a new conversation
ISendEndpointProvider			Scoped			Send messages from consumer dependencies, ASP.NET Controllers
IPublishEndpoint				Scoped			Publish messages from consumer dependencies, ASP.NET Controllers
IClientFactory					Singleton		Used to create request clients (singleton, or within scoped consumers)
IRequestClient<SubmitOrder>		Scoped			Used to send requests
ConsumeContext					Scoped			Available in any message scope, such as a consumer, saga, or activity


//// Multibus

The registered interfaces are slightly different for additional bus instances.

IBusControl									N/A	Not registered, but automatically started/stopped by the hosted service
IBus										N/A	Not registered, the new bus interface is registered instead
ISecondBus									Singleton	Publish/Send on this bus, starting a new conversation
ISendEndpointProvider						Scoped	Send messages from consumer dependencies only
IPublishEndpoint							Scoped	Publish messages from consumer dependencies only
IClientFactory								N/A	Registered as an instance-specific client factory
IRequestClient<SubmitOrder>					Scoped	Created using the specific bus instance
ConsumeContext								Scoped	Available in any message scope, such as a consumer, saga, or activity
Bind<ISecondBus, ISendEndpointProvider>		Scoped	Send messages from controllers or outside of a consumer context
Bind<ISecondBus, IPublishEndpoint>			Scoped	Publish messages from controllers or outside of a consumer context
Bind<ISecondBus, IClientFactory>			Scoped	Registered as an instance-specific client factory
Bind<ISecondBus, IRequestClient<SubmitOrder>>	Scoped	Created using the bound bus instance