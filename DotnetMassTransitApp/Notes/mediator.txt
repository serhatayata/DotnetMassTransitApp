MassTransit includes a mediator implementation, with full support for consumers, handlers, and sagas (including saga 
state machines). MassTransit Mediator runs in-process and in-memory, no transport is required. For maximum performance, messages 
are passed by reference, instead than being serialized, and control flows directly from the Publish/Send caller to the consumer. 
If a consumer throws an exception, the Publish/Send method throws and the exception should be handled by the caller.

Mediator is a behavioral design pattern in which a mediator encapsulates communication between objects to reduce coupling.

Consumers and sagas (including saga repositories) can be added, routing slip activities are not supported using mediator. 
Consumer and saga definitions are supported as well, but certain properties like EndpointName are ignored. Middleware 
components, including UseMessageRetry and UseInMemoryOutbox, are fully supported.

Once created, Mediator doesn't need to be started or stopped and can be used immediately. IMediator combines several 
other interfaces into a single interface, including IPublishEndpoint, ISendEndpoint, and IClientFactory.

MassTransit dispatches the command to the consumer asynchronously. Once the Consume method completes, the Send method will 
complete. If the consumer throws an exception, it will be propagated back to the caller.

Send vs Publish :
Send expects the message to be consumed. If there is no consumer configured for the message type, an exception will be thrown.
Publish, on the other hand, does not require the message to be consumed and does not throw an exception if the message 
isn't consumed. To throw an exception when a published message is not consumed, set the Mandatory property to true 
on PublishContext.

//////// Scoped Mediator

Main mediator interface IMediator is registered as a singleton but there is another scoped version of it IScopedMediator. 
This interface is registered as a part of current IoC scope (HttpContext or manually created) and can be used in order to share 
the scope for the entire pipeline. By default with IMediator, each consumer has its own scope. By using IScopedMediator, the 
scope is shared between several consumers.

Consumers can be connected and disconnected from mediator at run-time, allowing components and services to temporarily 
consume messages. Use the ConnectConsumer method to connect a consumer. The handle can be used to disconnect the consumer.

