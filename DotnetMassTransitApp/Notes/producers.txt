//////// PRODUCERS

An application or service can produce messages using two different methods. A message can be sent or a message can be published. 
The behavior of each method is very different, but it's easy to understand by looking at the type of messages involved with 
each particular method.

When a message is sent, it is delivered to a specific endpoint using a DestinationAddress. When a message is published, 
it is not sent to a specific endpoint, but is instead broadcasted to any consumers which have subscribed to the message type. 
For these two separate behavior, we describe messages sent as commands, and messages published as events.

To send a message, the DestinationAddress is used to deliver the message to an endpoint — such as a queue. One of the Send 
method overloads on the ISendEndpoint interface is called, which will then send the message to the transport. An ISendEndpoint 
is obtained from one of the following objects:

- The ConsumeContext, of the message being consumed This ensures that the correlation headers, message headers, and trace 
information is propagated to the sent message.

- An ISendEndpointProvider, instance This may be passed as an argument, but is typically specified on the constructor of an object 
that is resolved using a dependency injection container.

- The IBus, The last resort, and should only be used for messages that are being sent by an initiator — a process that is 
initiating a business process.

Once the Send method has been called (only once or repeatedly to send a series of messages), the ISendEndpoint reference should 
fall out of scope. Applications should not store the ISendEndpoint reference, it is automatically cached by MassTransit and discarded when it is no longer needed.

For instance, an IBus instance is a send endpoint provider, but it should never be used by a consumer to obtain an 
ISendEndpoint. ConsumeContext can also provide send endpoints, and should be used since it is closer to the consumer.

This cannot be stressed enough -- always obtain an ISendEndpoint from the closest scope. There is extensive logic to tie 
message flows together using conversation, correlation, and initiator identifiers. By skipping a level and going outside the 
closest scope, that critical information will be lost which prevents the useful trace identifiers from being propagated.

//////// Send Endpoint

To obtain a send endpoint from a send endpoint provider, call the GetSendEndpoint. The method is async, 
so be sure to await the result.

There are many overloads for the Send method. Because MassTransit is built around filters and pipes, pipes are used to 
customize the message delivery behavior of Send. There are also some useful overloads (via extension methods) to make 
sending easier and less noisy due to the pipe construction, etc.

//////// Send with Timeout

If there is a connectivity issue between the application and the broker, the Send method will internally retry until 
the connection is restored blocking the returned Task until the send operation completes. The Send methods support 
passing a CancellationToken that can be used to cancel the operation.



//////// Endpoint Address

An endpoint address is a fully-qualified URI which may include transport-specific details. For example, an endpoint on a 
local RabbitMQ server would be: rabbitmq://localhost/input-queue

Transport-specific details may include query parameters, such as: rabbitmq://localhost/input-queue?durable=false


//////// Short Addresses

Starting with MassTransit v6, short addresses are supported. For instance, to obtain a send endpoint for a queue on 
RabbitMQ, the caller would only have to specify: GetSendEndpoint(new Uri("queue:input-queue"))

This would return a send endpoint for the input-queue exchange, which would be bound to the input-queue queue. Both the 
exchange and the queue would be created if either did not exist. This short syntax eliminates the need to know the scheme, 
host, port, and virtual host of the broker, only the queue and/or exchange details are required.


//////// Address Conventions

Using send endpoints might seem too verbose, because before sending any message, you need to get the send endpoint and to 
do that you need to have an endpoint address. Usually, addresses are kept in the configuration and accessing the 
configuration from all over the application is not a good practice.

Endpoint conventions solve this issue by allowing you to configure the mapping between message types and endpoint addresses. 
A potential downside here that you will not be able to send messages of the same type to different endpoints by using 
conventions. If you need to do this, keep using the GetSendEndpoint method.

//////// Publish

Messages are published similarly to how messages are sent, but in this case, a single IPublishEndpoint is used. The same rules 
for endpoints apply, the closest instance of the publish endpoint should be used. So the ConsumeContext for consumers, and 
IBus for applications that are published outside of a consumer context.

In MassTransit, Publish follows the publish subscribe messaging pattern. For each message published, a copy of the message 
is delivered to each subscriber. The mechanism by which this happens is implemented by the message transport, but semantically 
the operation is the same regardless of which transport is used.

The same guidelines apply for publishing messages, the closest object should be used.

- The ConsumeContext of the message being consumed
  This ensures that the correlation headers, message headers, and trace information is propagated to the published message.

- An IPublishEndpoint instance
  This may be passed as an argument, but is typically specified on the constructor of an object that is resolved using a 
  dependency injection container.

- The IBus
  The last resort, and should only be used for messages that are being published by an initiator — a process that is initiating 
  a business process.

//////// Message Initialization

Messages can be initialized by MassTransit using an anonymous object passed as an object to the publish or send methods. 
While originally designed to support the initialization of interface-based message types, anonymous objects can also be used 
to initialize message types defined using classes or records.

- Object Properties

The anonymous object properties are matched by name and there is an extensive set of type conversions that may be used to match 
the types defined by the interface. Most numeric, string, and date/time conversions are supported, as well as several 
advanced conversions (including variables, and asynchronous Task<T> results).

Collections, including arrays, lists, and dictionaries, are broadly supported, including the conversion of list elements, as well 
as dictionary keys and values. For instance, a dictionary of (int,decimal) could be converted on the fly to (long, string) using 
the default format conversions.

Nested objects are also supported, for instance, if a property was of type Address and another anonymous object was created (or 
any type whose property names match the names of the properties on the message contract), those properties would be set on 
the message contract.


//////// Interface Messages

MassTransit supports interface message types and there are convenience methods to initialize the interface without requiring 
the creation of a class implementing the interface.


//////// Headers

Header values can be specified in the anonymous object using a double-underscore (pronounced 'dunder' apparently) property 
name. For instance, to set the message time-to-live, specify a property with the duration. Remember, any value that can 
be converted to a TimeSpan works!


//////// Variables

MassTransit also supports variables, which are special types added to the anonymous object. Following the example above, 
the initialization could be changed to use variables for the OrderId and OrderDate. Variables are consistent throughout the 
message creation, using the same variable multiple times returns the value. For instance, the Id created to set the OrderId would 
be the same used to set the OrderId in each item.


//////// Async Properties

Message initializers are asynchronous which makes it possible to do some pretty cool things, including waiting for Task 
input properties to complete and use the result to initialize the property. An example is shown below.


//////// Send Headers

There are a variety of message headers available which are used for correlation and tracking of messages. It is also possible 
to override some default behaviors of MassTransit when a fault occurs. For instance, a fault is normally published when 
a consumer throws an exception. If instead the application wants faults delivered to a specific address, the FaultAddress can 
be specified via a header.