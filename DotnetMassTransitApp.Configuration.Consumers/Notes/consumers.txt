Consumer ->	A class that consumes one or more messages types, one for each implementation of IConsumer<T>

Batch Consumer -> A class that consumes multiple messages in batches, by implementing IConsumer<Batch<T>>

Job Consumer ->	A class that consumes a job message, specified by the IJobConsumer<T> interface

Consumer Definition ->	A class, derived from ConsumerDefinition<TConsumer> that configures settings and the consumer's 
receive endpoint

Receive Endpoint ->	Receives messages from a broker queue and delivers those messages to consumer types configured on the 
receive endpoint

Consumers can be added many ways allowing either a simple of fine-grained approach to registration. Consumers are added inside 
the AddMassTransit configuration, but before the transport.


//////// Batch Options

If you want your consumer to process multiple messages at a time, you can configure a Batch Consumer. This is a consumer 
that implements IConsumer<Batch<TMessage>>.

Property			Type		  Default		Description
MessageLimit		int			  10		    Max number of messages in a batch
ConcurrencyLimit	int	          1			    number of concurrent batches
TimeLimit			TimeSpan	  1 sec		    maximum time to wait before delivering a partial batch
TimeLimitStart		TimeSpan	  From First    starting point
GroupKeyProvider	object?		  null		    the property to group by


//////// Job Options

If your consumer needs to work for an extended period of time, greater than a second, you may want to register the consumer as a 
job consumer. 

Property			Type			Default			Description
JobTimeout			TimeSpan		5 minutes		Maximum time the job is allowed to run
ConcurrentJobLimit	int				1				Number of concurrent executing jobs
RetryPolicy			IRetryPolicy	None			How should failures be retried, if at all
JobTypeName			string			Job Type		Override the default job type name used in the JobTypeSaga table (display one)


//////// Retry Policies

None: No retries
Immediate: retry N times, with an optional exception filter
Intervals: retry N times, with a pause between and an optional exception filter
Incremental: retry N times, with an increasing pause between and an optional exception filter
Exponential: retry N times, with an ever increasing pause between and an optional exception filter


//////// Configuring Endpoints

By default MassTransit requires no explicit configuration of endpoints, and can be created automatically by 
calling ConfigureEndpoints. You can customize this behavior using ConsumerDefinition or by specifying the endpoint 
configuration inline.


//////// Consumer Configuration

ConfigureConsumer<T>(context);

ConfigureConsumer<T>(context, consumer => 
{
    // configure consumer-specific middleware
});

ConfigureConsumers(context);


//////// Consumer Definitions

Inside of a consumer definition you can control all of the definitions about a consumer and its associated endpoint.



